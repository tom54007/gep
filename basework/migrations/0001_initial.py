# Generated by Django 3.0.4 on 2020-06-25 17:09

from django.db import migrations, models
import django.db.models.deletion
import work.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('work', '0013_auto_20200317_0930'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConstantEg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Raw_coal', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='原煤')),
                ('Clean_coal', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='洗精煤')),
                ('Coke', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='焦炭')),
                ('Briquette', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='型煤')),
                ('Other_coking_products', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='其他焦化产品')),
                ('Crude', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='原油')),
                ('Fuel_oil', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='燃料油')),
                ('Gasoline', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='汽油')),
                ('Diesel', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='柴油')),
                ('Kerosene', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='煤油')),
                ('Liquefied_petroleum_gas', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='液化石油气')),
                ('Refinery_dry_gas', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='炼厂干气')),
                ('Naphtha', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='石脑油')),
                ('Asphalt', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='沥青')),
                ('Lubricating_oil', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='润滑油')),
                ('Petroleum_coke', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='石油焦')),
                ('Natural_gas', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='天然气')),
                ('Cement', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='水泥')),
                ('Steel', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='钢铁')),
                ('Farmland', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='农地')),
                ('Woodland', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='林地')),
                ('Pastureland', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='畜牧地')),
                ('Fishing_ground', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='渔场')),
                ('Construction_land', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='建设用地')),
                ('Raw_coal_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='原煤热值')),
                ('Clean_coal_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='洗精煤热值')),
                ('Coke_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='焦炭热值')),
                ('Briquette_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='型煤热值')),
                ('Other_coking_products_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='其他焦化产品热值')),
                ('Crude_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='原油热值')),
                ('Fuel_oil_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='燃料油热值')),
                ('Gasoline_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='汽油热值')),
                ('Diesel_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='柴油热值')),
                ('Kerosene_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='煤油热值')),
                ('Liquefied_petroleum_gas_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='液化石油气热值')),
                ('Refinery_dry_gas_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='炼厂干气热值')),
                ('Naphtha_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='石脑油热值')),
                ('Asphalt_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='沥青热值')),
                ('Lubricating_oil_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='润滑油热值')),
                ('Petroleum_coke_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='石油焦热值')),
                ('Natural_gas_MJ', models.FloatField(validators=[work.models.can_not_equal_zero], verbose_name='天然气热值')),
            ],
            options={
                'verbose_name': '能源常量',
            },
        ),
        migrations.CreateModel(
            name='Prov_Annual_data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('province', models.CharField(max_length=255, verbose_name='省份')),
                ('year', models.IntegerField(verbose_name='年度')),
                ('Consume_Raw_coal', models.FloatField(verbose_name='原煤消耗量')),
                ('Consume_Clean_coal', models.FloatField(verbose_name='洗精煤消耗量')),
                ('Consume_Coke', models.FloatField(verbose_name='焦炭消耗量')),
                ('Consume_Briquette', models.FloatField(default=0, verbose_name='型煤消耗量')),
                ('Consume_Other_coking_products', models.FloatField(verbose_name='其他焦化产品消耗量')),
                ('Consume_Crude', models.FloatField(verbose_name='原油消耗量')),
                ('Consume_Fuel_oil', models.FloatField(verbose_name='燃料油消耗量')),
                ('Consume_Gasoline', models.FloatField(verbose_name='汽油消耗量')),
                ('Consume_Diesel', models.FloatField(verbose_name='柴油消耗量')),
                ('Consume_Kerosene', models.FloatField(verbose_name='煤油消耗量')),
                ('Consume_Liquefied_petroleum_gas', models.FloatField(verbose_name='液化石油气消耗量')),
                ('Consume_Refinery_dry_gas', models.FloatField(default=0, verbose_name='炼厂干气消耗量')),
                ('Consume_Naphtha', models.FloatField(verbose_name='石脑油消耗量')),
                ('Consume_Asphalt', models.FloatField(default=0, verbose_name='沥青消耗量')),
                ('Consume_Lubricating_oil', models.FloatField(verbose_name='润滑油消耗量')),
                ('Consume_Petroleum_coke', models.FloatField(default=0, verbose_name='石油焦消耗量')),
                ('Consume_Natural_gas', models.FloatField(verbose_name='天然气消耗量')),
                ('Consume_Cement', models.FloatField(verbose_name='水泥消耗量')),
                ('Consume_Steel', models.FloatField(verbose_name='钢铁消耗量')),
                ('Consume_Farmland', models.FloatField(verbose_name='农地消耗量')),
                ('Consume_Woodland', models.FloatField(verbose_name='林地消耗量')),
                ('Consume_Pastureland', models.FloatField(verbose_name='畜牧地消耗量')),
                ('Consume_Fishing_ground', models.FloatField(verbose_name='渔场消耗量')),
                ('Consume_Construction_land', models.FloatField(verbose_name='建设用地消耗量')),
                ('GDP', models.FloatField(verbose_name='地区当年生产总值')),
                ('Sown_area', models.FloatField(verbose_name='地区当年播种面积')),
                ('Total_population', models.FloatField(verbose_name='地区当年总人口')),
                ('Total_power_generation', models.FloatField(verbose_name='地区当年总发电量')),
                ('Total_energy_consumption', models.FloatField(verbose_name='地区当年能源消费总量')),
                ('Total_water_consumption', models.FloatField(verbose_name='地区当年用水总量')),
                ('The_total_area', models.FloatField(verbose_name='地区当年总面积')),
                ('Number_of_employees_in_basic_pension_insurance', models.FloatField(verbose_name='地区当年基本养老保险职工人数')),
                ('Number_of_basic_medical_insurance', models.FloatField(verbose_name='地区当年基本医疗保险人数')),
                ('Number_of_unemployment_insurance', models.FloatField(verbose_name='地区当年失业保险人数')),
                ('Nuclear_power_generation', models.FloatField(verbose_name='地区当年核电发电量')),
                ('Wind_power_generation', models.FloatField(verbose_name='地区当年风电发电量')),
                ('Hydropower_generation', models.FloatField(verbose_name='地区当年水电发电量')),
                ('Photovoltaic_power_generation', models.FloatField(verbose_name='地区当年光伏发电量')),
                ('Primary_school_number', models.FloatField(verbose_name='小学人数')),
                ('Number_of_junior_high_school', models.FloatField(verbose_name='初中人数')),
                ('High_school_number', models.FloatField(verbose_name='高中人数')),
                ('University_and_above', models.FloatField(verbose_name='大学及以上人数')),
                ('r_d', models.FloatField(verbose_name='企业R&D内部经费支出')),
                ('rural_urban', models.FloatField(verbose_name='乡-城人均年收入比(/)')),
                ('urban_per', models.FloatField(verbose_name='城镇居民人均可支配收入(元)')),
                ('rural_per', models.FloatField(verbose_name='农村居民人均可支配收入(元)')),
                ('garbage', models.FloatField(verbose_name='生活垃圾无害化处理率(%)')),
                ('bus_per', models.FloatField(verbose_name='平均万人拥有公共汽车(/)')),
                ('urban_sewage', models.FloatField(verbose_name='城镇生活污水集中处理率(%)')),
                ('mortality', models.FloatField(verbose_name='死亡率(%)')),
                ('pm25', models.FloatField(verbose_name='PM2.5年平均浓度(微克/立方米)')),
                ('so2_emissions', models.FloatField(verbose_name='二氧化硫排放量(万吨)')),
                ('cod_emissions', models.FloatField(verbose_name='化学需氧量排放量(万吨)')),
                ('nh_emissions', models.FloatField(verbose_name='氨氮排放量(万吨)')),
                ('per_unit_gdp_target', models.FloatField(null=True, verbose_name='单位GDP能耗目标值')),
                ('co2_per_gdp_target', models.FloatField(null=True, verbose_name='单位GDP二氧化碳排放量目标值')),
                ('water_per_gdp_target', models.FloatField(null=True, verbose_name='单位GDP用水量目标值')),
                ('planting_area_target', models.FloatField(null=True, verbose_name='播种面积占比目标值')),
                ('edu_years_target', models.FloatField(null=True, verbose_name='平均受教育年限目标值')),
                ('ef_per_target', models.FloatField(null=True, verbose_name='人均生态足迹目标值')),
                ('water_per_target', models.FloatField(null=True, verbose_name='人均用水量目标值')),
                ('pension_cov_target', models.FloatField(null=True, verbose_name='养老保险覆盖率目标值')),
                ('medical_cov_target', models.FloatField(null=True, verbose_name='医疗保险覆盖率目标值')),
                ('unemployment_cov_target', models.FloatField(null=True, verbose_name='失业保险覆盖率目标值')),
                ('renewable_energy_per_target', models.FloatField(null=True, verbose_name='可再生能源供给占比目标值')),
                ('r_d_target', models.FloatField(null=True, verbose_name='企业R&D内部经费支出目标值')),
                ('rural_urban_target', models.FloatField(null=True, verbose_name='乡-城人均年收入目标值')),
                ('urban_per_target', models.FloatField(null=True, verbose_name='城镇居民平均可支配收入目标值')),
                ('rural_per_target', models.FloatField(null=True, verbose_name='农村居民平均可支配收入目标值')),
                ('garbage_target', models.FloatField(null=True, verbose_name='生活垃圾无害化处理率目标值')),
                ('bus_per_target', models.FloatField(null=True, verbose_name='平均每万人拥有公交车辆目标值')),
                ('urban_sewage_target', models.FloatField(null=True, verbose_name='城镇生活污水集中处理率目标值')),
                ('mortality_target', models.FloatField(null=True, verbose_name='死亡率目标值')),
                ('pm25_target', models.FloatField(null=True, verbose_name='PM2.5年平均浓度目标值')),
                ('so2_emissions_target', models.FloatField(null=True, verbose_name='二氧化硫排放量目标值')),
                ('cod_emissions_target', models.FloatField(null=True, verbose_name='化学需氧量排放量目标值')),
                ('nh_emissions_target', models.FloatField(null=True, verbose_name='氨氮排放量目标值')),
            ],
            options={
                'verbose_name': '省级年度原始数据',
                'verbose_name_plural': '省级年度原始数据',
                'ordering': ('-year', 'province'),
            },
        ),
        migrations.CreateModel(
            name='Prov_Calculated_value',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('province', models.CharField(max_length=255, verbose_name='省份')),
                ('year', models.IntegerField(verbose_name='年度')),
                ('Cal_Raw_coal', models.FloatField(null=True, verbose_name='原煤_年度计算值')),
                ('Cal_Clean_coal', models.FloatField(null=True, verbose_name='洗精煤_年度计算值')),
                ('Cal_Coke', models.FloatField(null=True, verbose_name='焦炭_年度计算值')),
                ('Cal_Briquette', models.FloatField(null=True, verbose_name='型煤_年度计算值')),
                ('Cal_Other_coking_products', models.FloatField(null=True, verbose_name='其他焦化产品_年度计算值')),
                ('Cal_Crude', models.FloatField(null=True, verbose_name='原油_年度计算值')),
                ('Cal_Fuel_oil', models.FloatField(null=True, verbose_name='燃料油_年度计算值')),
                ('Cal_Gasoline', models.FloatField(null=True, verbose_name='汽油_年度计算值')),
                ('Cal_Diesel', models.FloatField(null=True, verbose_name='柴油_年度计算值')),
                ('Cal_Kerosene', models.FloatField(null=True, verbose_name='煤油_年度计算值')),
                ('Cal_Liquefied_petroleum_gas', models.FloatField(null=True, verbose_name='液化石油气_年度计算值')),
                ('Cal_Refinery_dry_gas', models.FloatField(null=True, verbose_name='炼厂干气_年度计算值')),
                ('Cal_Naphtha', models.FloatField(null=True, verbose_name='石脑油_年度计算值')),
                ('Cal_Asphalt', models.FloatField(null=True, verbose_name='沥青_年度计算值')),
                ('Cal_Lubricating_oil', models.FloatField(null=True, verbose_name='润滑油_年度计算值')),
                ('Cal_Petroleum_coke', models.FloatField(null=True, verbose_name='石油焦_年度计算值')),
                ('Cal_Natural_gas', models.FloatField(null=True, verbose_name='天然气_年度计算值')),
                ('GHG_Emission_a', models.FloatField(null=True, verbose_name='温室气体排放量_年度计算值')),
                ('CO2_Emission_a', models.FloatField(null=True, verbose_name='二氧化碳排放量_年度计算值')),
                ('Cal_Cement', models.FloatField(null=True, verbose_name='水泥_年度计算值')),
                ('Cal_Steel', models.FloatField(null=True, verbose_name='钢铁_年度计算值')),
                ('GHG_Emission_b', models.FloatField(null=True, verbose_name='温室气体排放量_年度计算值')),
                ('CO2_Emission_b', models.FloatField(null=True, verbose_name='二氧化碳排放量_年度计算值')),
                ('Total_CO2_Emission', models.FloatField(null=True, verbose_name='二氧化碳排放总量_年度计算值')),
                ('Cal_EF', models.FloatField(null=True, verbose_name='生态足迹_年度计算值')),
                ('per_unit_gdp', models.FloatField(null=True, verbose_name='单位GDP能耗')),
                ('co2_per_gdp', models.FloatField(null=True, verbose_name='单位GDP二氧化碳排放量')),
                ('water_per_gdp', models.FloatField(null=True, verbose_name='单位GDP用水量')),
                ('planting_area', models.FloatField(null=True, verbose_name='播种面积占比')),
                ('edu_years', models.FloatField(null=True, verbose_name='平均受教育年限')),
                ('ef_per', models.FloatField(null=True, verbose_name='人均生态足迹')),
                ('water_per', models.FloatField(null=True, verbose_name='人均用水量')),
                ('pension_cov', models.FloatField(null=True, verbose_name='养老保险覆盖率')),
                ('medical_cov', models.FloatField(null=True, verbose_name='医疗保险覆盖率')),
                ('unemployment_cov', models.FloatField(null=True, verbose_name='失业保险覆盖率')),
                ('renewable_energy_per', models.FloatField(null=True, verbose_name='可再生能源供给占比(省)')),
                ('r_d', models.FloatField(verbose_name='企业R&D内部经费支出')),
                ('rural_urban', models.FloatField(verbose_name='乡-城人均年收入比(/)')),
                ('urban_per', models.FloatField(verbose_name='城镇居民人均可支配收入(元)')),
                ('rural_per', models.FloatField(verbose_name='农村居民人均可支配收入(元)')),
                ('garbage', models.FloatField(verbose_name='生活垃圾无害化处理率(%)')),
                ('bus_per', models.FloatField(verbose_name='平均万人拥有公共汽车(/)')),
                ('urban_sewage', models.FloatField(verbose_name='城镇生活污水集中处理率(%)')),
                ('mortality', models.FloatField(verbose_name='死亡率(%)')),
                ('pm25', models.FloatField(verbose_name='PM2.5年平均浓度(微克/立方米)')),
                ('so2_emissions', models.FloatField(verbose_name='二氧化硫排放量(万吨)')),
                ('cod_emissions', models.FloatField(verbose_name='化学需氧量排放量(万吨)')),
                ('nh_emissions', models.FloatField(verbose_name='氨氮排放量(万吨)')),
            ],
            options={
                'verbose_name': '省级年度计算值',
                'verbose_name_plural': '省级年度计算值',
                'ordering': ('-year', 'province'),
            },
        ),
        migrations.CreateModel(
            name='prov_gep_score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('province', models.CharField(max_length=50, verbose_name='省份')),
                ('year', models.IntegerField(verbose_name='年度')),
                ('r_d_score', models.FloatField(null=True, verbose_name='企业R&D内部经费支出(万元)')),
                ('per_unit_gdp_score', models.FloatField(null=True, verbose_name='单位GDP能耗(吨/万元)')),
                ('renewable_energy_per_score', models.FloatField(null=True, verbose_name='可再生能源供给占比')),
                ('rural_urban_score', models.FloatField(null=True, verbose_name='乡-城人均年收入比(/)')),
                ('urban_per_score', models.FloatField(null=True, verbose_name='城镇居民人均可支配收入(元)')),
                ('rural_per_score', models.FloatField(null=True, verbose_name='农村居民人均可支配收入(元)')),
                ('garbage_score', models.FloatField(null=True, verbose_name='生活垃圾无害化处理率(%)')),
                ('bus_per_score', models.FloatField(null=True, verbose_name='平均万人拥有公共汽车(/)')),
                ('urban_sewage_score', models.FloatField(null=True, verbose_name='城镇生活污水集中处理率(%)')),
                ('edu_years_score', models.FloatField(null=True, verbose_name='平均受教育年限(年)')),
                ('mortality_score', models.FloatField(null=True, verbose_name='死亡率(%)')),
                ('pension_cov_score', models.FloatField(null=True, verbose_name='养老保险覆盖率(%)')),
                ('medical_cov_score', models.FloatField(null=True, verbose_name='医疗保险覆盖率(%)')),
                ('unemployment_cov_score', models.FloatField(null=True, verbose_name='失业保险覆盖率(%)')),
                ('pm25_score', models.FloatField(null=True, verbose_name='PM2.6年平均浓度(微克/立方米)')),
                ('so2_emissions_score', models.FloatField(null=True, verbose_name='二氧化硫排放量(万吨)')),
                ('co2_per_gdp_score', models.FloatField(null=True, verbose_name='单位GDP二氧化碳排放量(千克/元)')),
                ('cod_emissions_score', models.FloatField(null=True, verbose_name='化学需氧量排放量(万吨)')),
                ('nh_emissions_score', models.FloatField(null=True, verbose_name='氨氮排放量(万吨)')),
                ('water_per_score', models.FloatField(null=True, verbose_name='人均耗水量(立方米)')),
                ('water_per_gdp_score', models.FloatField(null=True, verbose_name='单位GDP用水量(立方米/万元)')),
                ('planting_area_score', models.FloatField(null=True, verbose_name='播种面积占比(%)')),
                ('ef_per_score', models.FloatField(null=True, verbose_name='人均生态足迹(万吨碳/万人)')),
                ('green_innovation', models.FloatField(null=True, verbose_name='绿色创新')),
                ('energy_use', models.FloatField(null=True, verbose_name='能源利用')),
                ('renewable_energy', models.FloatField(null=True, verbose_name='可再生能源供给')),
                ('parma_ratio', models.FloatField(null=True, verbose_name='帕尔玛比率')),
                ('income', models.FloatField(null=True, verbose_name='收入')),
                ('infrastructure', models.FloatField(null=True, verbose_name='基础设施建设')),
                ('education', models.FloatField(null=True, verbose_name='教育')),
                ('life_expectancy', models.FloatField(null=True, verbose_name='预期寿命')),
                ('social_security', models.FloatField(null=True, verbose_name='社会保障')),
                ('air_pollution', models.FloatField(null=True, verbose_name='大气污染')),
                ('greenhouse', models.FloatField(null=True, verbose_name='温室气体排放')),
                ('nitrogen', models.FloatField(null=True, verbose_name='氮排放')),
                ('water_withdrawal', models.FloatField(null=True, verbose_name='取水量')),
                ('land_use', models.FloatField(null=True, verbose_name='土地利用')),
                ('EF', models.FloatField(null=True, verbose_name='生态足迹')),
                ('city_green_economy', models.FloatField(null=True, verbose_name='绿色经济')),
                ('city_sustainable', models.FloatField(null=True, verbose_name='可持续发展')),
                ('city_gep_plus', models.FloatField(null=True, verbose_name='GEP+')),
            ],
            options={
                'verbose_name': '省份年度得分',
                'verbose_name_plural': '省份年度得分',
                'ordering': ('-year', 'province'),
                'unique_together': {('province', 'year')},
            },
        ),
        migrations.CreateModel(
            name='ImportFile_excel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arealevel', models.CharField(choices=[('area', '市级'), ('province', '省级')], max_length=50, verbose_name='数据级别')),
                ('year', models.IntegerField(verbose_name='年度')),
                ('excelfile', models.FileField(upload_to='data/%Y-%m-%d', verbose_name='上传')),
                ('add_date', models.DateTimeField(auto_now=True, verbose_name='上传日期')),
                ('province', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work.Province', verbose_name='省份')),
            ],
            options={
                'verbose_name': '数据导入',
            },
        ),
        migrations.CreateModel(
            name='Calculated_value',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('province', models.CharField(max_length=50, verbose_name='省份')),
                ('area', models.CharField(max_length=50, verbose_name='地区')),
                ('year', models.IntegerField(verbose_name='年度')),
                ('Cal_Raw_coal', models.FloatField(null=True, verbose_name='原煤_年度计算值')),
                ('Cal_Clean_coal', models.FloatField(null=True, verbose_name='洗精煤_年度计算值')),
                ('Cal_Coke', models.FloatField(null=True, verbose_name='焦炭_年度计算值')),
                ('Cal_Briquette', models.FloatField(null=True, verbose_name='型煤_年度计算值')),
                ('Cal_Other_coking_products', models.FloatField(null=True, verbose_name='其他焦化产品_年度计算值')),
                ('Cal_Crude', models.FloatField(null=True, verbose_name='原油_年度计算值')),
                ('Cal_Fuel_oil', models.FloatField(null=True, verbose_name='燃料油_年度计算值')),
                ('Cal_Gasoline', models.FloatField(null=True, verbose_name='汽油_年度计算值')),
                ('Cal_Diesel', models.FloatField(null=True, verbose_name='柴油_年度计算值')),
                ('Cal_Kerosene', models.FloatField(null=True, verbose_name='煤油_年度计算值')),
                ('Cal_Liquefied_petroleum_gas', models.FloatField(null=True, verbose_name='液化石油气_年度计算值')),
                ('Cal_Refinery_dry_gas', models.FloatField(null=True, verbose_name='炼厂干气_年度计算值')),
                ('Cal_Naphtha', models.FloatField(null=True, verbose_name='石脑油_年度计算值')),
                ('Cal_Asphalt', models.FloatField(null=True, verbose_name='沥青_年度计算值')),
                ('Cal_Lubricating_oil', models.FloatField(null=True, verbose_name='润滑油_年度计算值')),
                ('Cal_Petroleum_coke', models.FloatField(null=True, verbose_name='石油焦_年度计算值')),
                ('Cal_Natural_gas', models.FloatField(null=True, verbose_name='天然气_年度计算值')),
                ('GHG_Emission_a', models.FloatField(null=True, verbose_name='温室气体排放量_年度计算值')),
                ('CO2_Emission_a', models.FloatField(null=True, verbose_name='二氧化碳排放量_年度计算值')),
                ('Cal_Cement', models.FloatField(null=True, verbose_name='水泥_年度计算值')),
                ('Cal_Steel', models.FloatField(null=True, verbose_name='钢铁_年度计算值')),
                ('GHG_Emission_b', models.FloatField(null=True, verbose_name='温室气体排放量_年度计算值')),
                ('CO2_Emission_b', models.FloatField(null=True, verbose_name='二氧化碳排放量_年度计算值')),
                ('Total_CO2_Emission', models.FloatField(null=True, verbose_name='二氧化碳排放总量_年度计算值')),
                ('Cal_EF', models.FloatField(null=True, verbose_name='生态足迹_年度计算值')),
                ('per_unit_gdp', models.FloatField(null=True, verbose_name='单位GDP能耗')),
                ('co2_per_gdp', models.FloatField(null=True, verbose_name='单位GDP二氧化碳排放量')),
                ('water_per_gdp', models.FloatField(null=True, verbose_name='单位GDP用水量')),
                ('planting_area', models.FloatField(null=True, verbose_name='播种面积占比')),
                ('edu_years', models.FloatField(null=True, verbose_name='平均受教育年限')),
                ('ef_per', models.FloatField(null=True, verbose_name='人均生态足迹')),
                ('water_per', models.FloatField(null=True, verbose_name='人均用水量')),
                ('pension_cov', models.FloatField(null=True, verbose_name='养老保险覆盖率')),
                ('medical_cov', models.FloatField(null=True, verbose_name='医疗保险覆盖率')),
                ('unemployment_cov', models.FloatField(null=True, verbose_name='失业保险覆盖率')),
                ('r_d', models.FloatField(null=True, verbose_name='规模以上工业企业R&D经费支出(万元)')),
                ('rural_urban', models.FloatField(null=True, verbose_name='乡-城人均年收入比(/)')),
                ('urban_per', models.FloatField(null=True, verbose_name='城镇居民人均可支配收入(元)')),
                ('rural_per', models.FloatField(null=True, verbose_name='农村居民人均可支配收入(元)')),
                ('garbage', models.FloatField(null=True, verbose_name='生活垃圾无害化处理率(%)')),
                ('bus_per', models.FloatField(null=True, verbose_name='平均万人拥有公共汽车(/)')),
                ('urban_sewage', models.FloatField(null=True, verbose_name='城镇生活污水集中处理率(%)')),
                ('mortality', models.FloatField(null=True, verbose_name='死亡率(%)')),
                ('pm25', models.FloatField(null=True, verbose_name='PM2.5年平均浓度(微克/立方米)')),
                ('so2_emissions', models.FloatField(null=True, verbose_name='二氧化硫排放量(万吨)')),
                ('cod_emissions', models.FloatField(null=True, verbose_name='化学需氧量排放量(万吨)')),
                ('nh_emissions', models.FloatField(null=True, verbose_name='氨氮排放量(万吨)')),
            ],
            options={
                'verbose_name': '地区年度计算值',
                'verbose_name_plural': '地区年度计算值',
                'ordering': ('-year', 'area', 'province'),
                'unique_together': {('province', 'area', 'year')},
            },
        ),
        migrations.CreateModel(
            name='area_gep_score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('province', models.CharField(max_length=50, verbose_name='省份')),
                ('area', models.CharField(max_length=50, verbose_name='地区')),
                ('year', models.IntegerField(verbose_name='年度')),
                ('r_d_score', models.FloatField(null=True, verbose_name='规模以上工业企业R&D经费支出(万元)')),
                ('per_unit_gdp_score', models.FloatField(null=True, verbose_name='单位GDP能耗(吨/万元)')),
                ('rural_urban_score', models.FloatField(null=True, verbose_name='乡-城人均年收入比(/)')),
                ('urban_per_score', models.FloatField(null=True, verbose_name='城镇居民人均可支配收入(元)')),
                ('rural_per_score', models.FloatField(null=True, verbose_name='农村居民人均可支配收入(元)')),
                ('garbage_score', models.FloatField(null=True, verbose_name='生活垃圾无害化处理率(%)')),
                ('bus_per_score', models.FloatField(null=True, verbose_name='平均万人拥有公共汽车(/)')),
                ('urban_sewage_score', models.FloatField(null=True, verbose_name='城镇生活污水集中处理率(%)')),
                ('edu_years_score', models.FloatField(null=True, verbose_name='平均受教育年限(年)')),
                ('mortality_score', models.FloatField(null=True, verbose_name='死亡率(%)')),
                ('pension_cov_score', models.FloatField(null=True, verbose_name='养老保险覆盖率(%)')),
                ('medical_cov_score', models.FloatField(null=True, verbose_name='医疗保险覆盖率(%)')),
                ('unemployment_cov_score', models.FloatField(null=True, verbose_name='失业保险覆盖率(%)')),
                ('pm25_score', models.FloatField(null=True, verbose_name='PM2.6年平均浓度(微克/立方米)')),
                ('so2_emissions_score', models.FloatField(null=True, verbose_name='二氧化硫排放量(万吨)')),
                ('co2_per_gdp_score', models.FloatField(null=True, verbose_name='单位GDP二氧化碳排放量(千克/元)')),
                ('cod_emissions_score', models.FloatField(null=True, verbose_name='化学需氧量排放量(万吨)')),
                ('nh_emissions_score', models.FloatField(null=True, verbose_name='氨氮排放量(万吨)')),
                ('water_per_score', models.FloatField(null=True, verbose_name='人均耗水量(立方米)')),
                ('water_per_gdp_score', models.FloatField(null=True, verbose_name='单位GDP用水量(立方米/万元)')),
                ('planting_area_score', models.FloatField(null=True, verbose_name='播种面积占比(%)')),
                ('ef_per_score', models.FloatField(null=True, verbose_name='人均生态足迹(万吨碳/万人)')),
                ('green_innovation', models.FloatField(null=True, verbose_name='绿色创新')),
                ('energy_use', models.FloatField(null=True, verbose_name='能源利用')),
                ('parma_ratio', models.FloatField(null=True, verbose_name='帕尔玛比率')),
                ('income', models.FloatField(null=True, verbose_name='收入')),
                ('infrastructure', models.FloatField(null=True, verbose_name='基础设施建设')),
                ('education', models.FloatField(null=True, verbose_name='教育')),
                ('life_expectancy', models.FloatField(null=True, verbose_name='预期寿命')),
                ('social_security', models.FloatField(null=True, verbose_name='社会保障')),
                ('air_pollution', models.FloatField(null=True, verbose_name='大气污染')),
                ('greenhouse', models.FloatField(null=True, verbose_name='温室气体排放')),
                ('nitrogen', models.FloatField(null=True, verbose_name='氮排放')),
                ('water_withdrawal', models.FloatField(null=True, verbose_name='取水量')),
                ('land_use', models.FloatField(null=True, verbose_name='土地利用')),
                ('EF', models.FloatField(null=True, verbose_name='生态足迹')),
                ('city_green_economy', models.FloatField(null=True, verbose_name='绿色经济')),
                ('city_sustainable', models.FloatField(null=True, verbose_name='可持续发展')),
                ('city_gep_plus', models.FloatField(null=True, verbose_name='GEP+')),
            ],
            options={
                'verbose_name': '地区年度得分',
                'verbose_name_plural': '地区年度得分',
                'ordering': ('-year', 'area', 'province'),
                'unique_together': {('province', 'area', 'year')},
            },
        ),
        migrations.CreateModel(
            name='Annual_data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('province', models.CharField(max_length=50, verbose_name='省份')),
                ('area', models.CharField(max_length=50, verbose_name='地区')),
                ('year', models.IntegerField(verbose_name='年度')),
                ('Consume_Raw_coal', models.FloatField(verbose_name='原煤消耗量')),
                ('Consume_Clean_coal', models.FloatField(verbose_name='洗精煤消耗量')),
                ('Consume_Coke', models.FloatField(verbose_name='焦炭消耗量')),
                ('Consume_Briquette', models.FloatField(default=0, verbose_name='型煤消耗量')),
                ('Consume_Other_coking_products', models.FloatField(verbose_name='其他焦化产品消耗量')),
                ('Consume_Crude', models.FloatField(verbose_name='原油消耗量')),
                ('Consume_Fuel_oil', models.FloatField(verbose_name='燃料油消耗量')),
                ('Consume_Gasoline', models.FloatField(verbose_name='汽油消耗量')),
                ('Consume_Diesel', models.FloatField(verbose_name='柴油消耗量')),
                ('Consume_Kerosene', models.FloatField(verbose_name='煤油消耗量')),
                ('Consume_Liquefied_petroleum_gas', models.FloatField(verbose_name='液化石油气消耗量')),
                ('Consume_Refinery_dry_gas', models.FloatField(default=0, verbose_name='炼厂干气消耗量')),
                ('Consume_Naphtha', models.FloatField(verbose_name='石脑油消耗量')),
                ('Consume_Asphalt', models.FloatField(default=0, verbose_name='沥青消耗量')),
                ('Consume_Lubricating_oil', models.FloatField(verbose_name='润滑油消耗量')),
                ('Consume_Petroleum_coke', models.FloatField(default=0, verbose_name='石油焦消耗量')),
                ('Consume_Natural_gas', models.FloatField(verbose_name='天然气消耗量')),
                ('Consume_Cement', models.FloatField(verbose_name='水泥消耗量')),
                ('Consume_Steel', models.FloatField(verbose_name='钢铁消耗量')),
                ('Consume_Farmland', models.FloatField(verbose_name='农地消耗量')),
                ('Consume_Woodland', models.FloatField(verbose_name='林地消耗量')),
                ('Consume_Pastureland', models.FloatField(verbose_name='畜牧地消耗量')),
                ('Consume_Fishing_ground', models.FloatField(verbose_name='渔场消耗量')),
                ('Consume_Construction_land', models.FloatField(verbose_name='建设用地消耗量')),
                ('GDP', models.FloatField(verbose_name='地区当年生产总值')),
                ('Sown_area', models.FloatField(verbose_name='地区当年播种面积')),
                ('Total_population', models.FloatField(verbose_name='地区当年总人口')),
                ('Total_energy_consumption', models.FloatField(verbose_name='地区当年能源消费总量')),
                ('Total_water_consumption', models.FloatField(verbose_name='地区当年用水总量')),
                ('The_total_area', models.FloatField(verbose_name='地区当年总面积')),
                ('Number_of_employees_in_basic_pension_insurance', models.FloatField(verbose_name='地区当年基本养老保险职工人数')),
                ('Number_of_basic_medical_insurance', models.FloatField(verbose_name='地区当年基本医疗保险人数')),
                ('Number_of_unemployment_insurance', models.FloatField(verbose_name='地区当年失业保险人数')),
                ('Primary_school_number', models.FloatField(verbose_name='小学人数')),
                ('Number_of_junior_high_school', models.FloatField(verbose_name='初中人数')),
                ('High_school_number', models.FloatField(verbose_name='高中人数')),
                ('University_and_above', models.FloatField(verbose_name='大学及以上人数')),
                ('r_d', models.FloatField(verbose_name='规模以上工业企业R&D经费支出(万元)')),
                ('rural_urban', models.FloatField(verbose_name='乡-城人均年收入比(/)')),
                ('urban_per', models.FloatField(verbose_name='城镇居民人均可支配收入(元)')),
                ('rural_per', models.FloatField(verbose_name='农村居民人均可支配收入(元)')),
                ('garbage', models.FloatField(verbose_name='生活垃圾无害化处理率(%)')),
                ('bus_per', models.FloatField(verbose_name='平均万人拥有公共汽车(/)')),
                ('urban_sewage', models.FloatField(verbose_name='城镇生活污水集中处理率(%)')),
                ('mortality', models.FloatField(verbose_name='死亡率(%)')),
                ('pm25', models.FloatField(verbose_name='PM2.5年平均浓度(微克/立方米)')),
                ('so2_emissions', models.FloatField(verbose_name='二氧化硫排放量(万吨)')),
                ('cod_emissions', models.FloatField(verbose_name='化学需氧量排放量(万吨)')),
                ('nh_emissions', models.FloatField(verbose_name='氨氮排放量(万吨)')),
            ],
            options={
                'verbose_name': '地区年度原始数据',
                'verbose_name_plural': '地区年度原始数据',
                'ordering': ('-year', 'area', 'province'),
                'unique_together': {('province', 'area', 'year')},
            },
        ),
    ]
